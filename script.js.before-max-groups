let currentStudents = [];
let groupHistory = {};
let currentClassId = null;
let incompatiblePairs = new Set();
let selectedAction = null; // 'new' or 'history'

// Screen management functions
function showStartScreen() {
    console.log('Resetting to start screen - wiping everything clean');
    
    // Hide all screens except start screen
    document.getElementById('startScreen').style.display = 'block';
    document.getElementById('mainScreen').style.display = 'none';
    document.getElementById('timestampSelection').style.display = 'none';
    
    // Ensure start controls are visible
    document.querySelector('.start-controls').style.display = 'block';
    
    // Reset ALL state variables to clean slate
    currentClassId = null;
    currentStudents = [];
    selectedAction = null;
    
    // Clear groups container completely
    const groupsContainer = document.getElementById('groupsContainer');
    if (groupsContainer) {
        groupsContainer.innerHTML = '';
    }
    
    // Reset all input fields
    const groupSizeInput = document.getElementById('groupSizeInput');
    if (groupSizeInput) {
        groupSizeInput.value = '';
    }
    
    const incompatibleInput = document.getElementById('incompatibleInput');
    if (incompatibleInput) {
        incompatibleInput.value = '';
    }
    
    // Hide action buttons that should only show when groups are created
    const shuffleBtn = document.getElementById('shuffleBtn');
    const saveBtn = document.getElementById('saveBtn');
    if (shuffleBtn) shuffleBtn.style.display = 'none';
    if (saveBtn) saveBtn.style.display = 'none';
    
    // Reset class button selection
    document.querySelectorAll('.class-btn').forEach(btn => btn.classList.remove('selected'));
    
    // Clear any class themes
    document.body.classList.remove('theme-701', 'theme-702', 'theme-703', 'theme-704');
    
    // Clear current class display
    const classDisplay = document.getElementById('current-class-display');
    if (classDisplay) {
        classDisplay.textContent = '';
    }
    
    // Reset timestamp dropdown
    const timestampDropdown = document.getElementById('historyTimestampDropdown');
    if (timestampDropdown) {
        timestampDropdown.innerHTML = '<option value="">Select a timestamp</option>';
    }
    
    console.log('Start screen reset complete - everything wiped clean');
}


function showMainScreen() {
    document.getElementById('startScreen').style.display = 'none';
    document.getElementById('mainScreen').style.display = 'block';
}

function showTimestampSelection() {
    document.getElementById('timestampSelection').style.display = 'block';
    document.querySelector('.start-controls').style.display = 'none';
}

function hideTimestampSelection() {
    document.getElementById('timestampSelection').style.display = 'none';
    // Ensure start controls are visible
    document.querySelector('.start-controls').style.display = 'block';    document.querySelector('.start-controls').style.display = 'block';
}

// Load students function
async function loadStudents(classId) {
    try {
        const response = await fetch(`/students/${classId}`);
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        const text = await response.text();
        currentStudents = text.split('\n')
            .map(name => name.trim())
            .filter(name => name !== '');
        currentClassId = classId;
    console.log(`Class selection: Setting currentClassId to ${classId}`);        
        // Load history for this class automatically
        await loadHistoryForClass(classId);
        
        // Initialize history for this class if it doesn't exist
        if (!groupHistory[classId]) {
            groupHistory[classId] = [];
        }
        
        document.getElementById('current-class-display').textContent = `Class ${classId} Loaded (${currentStudents.length} students)`;
        
        // Apply color theme
        document.body.classList.remove('theme-701', 'theme-702', 'theme-703', 'theme-704');
        document.body.classList.add(`theme-${classId}`);
        
        return true;
    } catch (error) {
        console.error('Error loading student file:', error);
        alert(`Failed to load students for class ${classId}.`);
        return false;
    }
}

async function loadHistoryForClass(classId) {
    try {
        const response = await fetch(`/history/${classId}`);
        if (!response.ok) {
            return;
        }
        const history = await response.json();
        groupHistory[classId] = history;
        
        // Load incompatible pairs from the last history entry
        if (history.length > 0) {
            const lastEntry = history[history.length - 1];
            incompatiblePairs = new Set(lastEntry.incompatiblePairs || []);
        }
        
        // Populate timestamp dropdown
        populateTimestampDropdown(classId);
        
        console.log(`History loaded for class ${classId}`);
    } catch (error) {
        console.log(`No history file found for class ${classId}`);
    }
}

function populateTimestampDropdown(classId) {
    const dropdown = document.getElementById('historyTimestampDropdown');
    dropdown.innerHTML = '<option value="">Select a timestamp...</option>';
    
    const history = groupHistory[classId];
    if (history && history.length > 0) {
        history.forEach((entry, index) => {
            const option = document.createElement('option');
            option.value = index;
            const date = new Date(entry.timestamp);
            option.textContent = date.toLocaleString();
            dropdown.appendChild(option);
        });
    }
}

function loadGroupsFromEntry(entry) {
    const groups = entry.groups;
    const groupsContainer = document.getElementById('groupsContainer');
    groupsContainer.innerHTML = '';
    
    // Set currentStudents to all students in the groups
    currentStudents = groups.flat();
    
    groups.forEach((groupStudents, index) => {
        const groupDiv = document.createElement('div');
        groupDiv.className = 'group';
        groupDiv.id = `group-${index + 1}`;
        groupDiv.innerHTML = `<h3>Group ${index + 1}</h3>`;
        
        groupStudents.forEach(student => {
            groupDiv.appendChild(createStudentElement(student));
        });
        
        addDropHandlers(groupDiv);
        groupsContainer.appendChild(groupDiv);
    });
    
    // Load incompatible pairs
    incompatiblePairs = new Set(entry.incompatiblePairs || []);
    
    // Show action buttons
    document.getElementById('shuffleBtn').style.display = 'inline-block';
    document.getElementById('saveBtn').style.display = 'inline-block';
}

// Event handlers for start screen
function handleClassSelection(classId) {
    console.log(`handleClassSelection called with classId: ${classId}`);
    
    // Update visual selection of class buttons
    document.querySelectorAll('.class-btn').forEach(btn => btn.classList.remove('selected'));
    document.getElementById(`load${classId}Btn`).classList.add('selected');
    
    // Set the current class ID immediately to avoid async issues
    currentClassId = classId;
    console.log(`currentClassId set to: ${currentClassId}`);
    
    loadStudents(classId).then(success => {
        console.log(`loadStudents completed for ${classId}, success: ${success}`);
        if (success) {
            console.log(`selectedAction is: ${selectedAction}`);
            if (selectedAction === 'new') {
                console.log("Showing main screen after timestamp load..."); showMainScreen(); console.log("Main screen shown, back button should work now");
                // Clear any existing groups
                document.getElementById('groupsContainer').innerHTML = '';                const history = groupHistory[classId];
                if (history && history.length > 0) {
                    showTimestampSelection();
                } else {
                    alert('No history found for this class. Creating new groups instead.');
                    selectedAction = 'new';
                    console.log("Showing main screen after timestamp load..."); showMainScreen(); console.log("Main screen shown, back button should work now");
                }
            }
        }
    });
}

// Group creation and management functions
function createGroups(students, groupSize) {
    const groupsContainer = document.getElementById('groupsContainer');
    groupsContainer.innerHTML = '';
    
    const shuffledStudents = [...students].sort(() => 0.5 - Math.random());
    const numGroups = Math.ceil(students.length / groupSize);
    
    for (let i = 0; i < numGroups; i++) {
        const groupDiv = document.createElement('div');
        groupDiv.className = 'group';
        groupDiv.id = `group-${i + 1}`;
        groupDiv.innerHTML = `<h3>Group ${i + 1}</h3>`;
        
        const start = i * groupSize;
        const end = start + groupSize;
        const groupStudents = shuffledStudents.slice(start, end);
        
        groupStudents.forEach(student => {
            groupDiv.appendChild(createStudentElement(student));
        });
        
        addDropHandlers(groupDiv);
        groupsContainer.appendChild(groupDiv);
    }
    
    document.getElementById('shuffleBtn').style.display = 'inline-block';
    document.getElementById('saveBtn').style.display = 'inline-block';
}

function getHistoricalPairs(classHistory) {
    const pairs = new Set();
    if (!classHistory) {
        return pairs;
    }
    classHistory.forEach(entry => {
        entry.groups.forEach(group => {
            for (let i = 0; i < group.length; i++) {
                for (let j = i + 1; j < group.length; j++) {
                    const pair = [group[i], group[j]].sort().join('|');
                    pairs.add(pair);
                }
            }
        });
    });
    return pairs;
}

function calculateScore(groups, historicalPairs) {
    let score = 0;
    let incompatiblePenalty = 0;
    groups.forEach(group => {
        for (let i = 0; i < group.length; i++) {
            for (let j = i + 1; j < group.length; j++) {
                const pair = [group[i], group[j]].sort().join('|');
                if (historicalPairs.has(pair)) {
                    score++;
                }
                if (incompatiblePairs.has(pair)) {
                    incompatiblePenalty += 1000;
                }
            }
        }
    });
    return score + incompatiblePenalty;
}

// Student element creation and drag/drop
function createStudentElement(studentName) {
    const studentDiv = document.createElement('div');
    studentDiv.className = 'student';
    studentDiv.draggable = true;
    
    const studentNameSpan = document.createElement('span');
    studentNameSpan.textContent = studentName;
    
    const lockIcon = document.createElement('span');
    lockIcon.className = 'lock-icon';
    lockIcon.textContent = '🔒';
    
    lockIcon.addEventListener('click', (e) => {
        e.stopPropagation();
        const isLocked = studentDiv.classList.toggle('locked');
        lockIcon.textContent = isLocked ? '🔓' : '🔒';
        studentDiv.draggable = !isLocked;
    });
    
    studentDiv.appendChild(studentNameSpan);
    studentDiv.appendChild(lockIcon);
    
    addDragHandlers(studentDiv);
    return studentDiv;
}

let draggedItem = null;

function addDragHandlers(item) {
    item.addEventListener('dragstart', () => {
        draggedItem = item;
        setTimeout(() => {
            item.classList.add('dragging');
        }, 0);
    });

    item.addEventListener('dragend', () => {
        setTimeout(() => {
            draggedItem.classList.remove('dragging');
            draggedItem = null;
        }, 0);
    });
}

function addDropHandlers(group) {
    group.addEventListener('dragover', (e) => {
        e.preventDefault();
    });

    group.addEventListener('dragenter', (e) => {
        e.preventDefault();
        if (draggedItem && group !== draggedItem.parentNode) { 
            group.style.backgroundColor = '#e0e0e0';
        }
    });

    group.addEventListener('dragleave', () => {
        group.style.backgroundColor = '#f9f9f9';
    });

    group.addEventListener('drop', (e) => {
        e.preventDefault();
        if (draggedItem && group !== draggedItem.parentNode) {
            group.appendChild(draggedItem);
        }
        group.style.backgroundColor = '#f9f9f9';
    });
}

// Initialize the app
function initializeApp() {
    // Start screen class button handlers
    document.getElementById('load701Btn').addEventListener('click', () => handleClassSelection('701'));
    document.getElementById('load702Btn').addEventListener('click', () => handleClassSelection('702'));
    document.getElementById('load703Btn').addEventListener('click', () => handleClassSelection('703'));
    document.getElementById('load704Btn').addEventListener('click', () => handleClassSelection('704'));
    document.getElementById('load100245Btn').addEventListener('click', () => handleClassSelection('100245'));

    // Action button handlers
    document.getElementById('createNewBtn').addEventListener('click', () => {
        selectedAction = 'new';
        if (currentClassId) {
            console.log("Showing main screen after timestamp load..."); showMainScreen(); console.log("Main screen shown, back button should work now");
        } else {
            alert('Please select a class first');
        }
    });

    document.getElementById('loadHistoryBtn').addEventListener('click', () => {
        selectedAction = 'history';
        if (currentClassId) {
            const history = groupHistory[currentClassId];
            if (history && history.length > 0) {
                showTimestampSelection();
            } else {
                alert('No history found for this class');
            }
        } else {
            alert('Please select a class first');
        }
    });

    // Back buttons
    document.getElementById('backToStartBtn').addEventListener('click', hideTimestampSelection);
    const backToStartMainBtn = document.getElementById('backToStartMainBtn'); console.log('Back to start button found:', backToStartMainBtn); if (backToStartMainBtn) { backToStartMainBtn.addEventListener('click', function() { console.log('Back to start button clicked!'); showStartScreen(); }); } else { console.error('Back to start button not found!'); }

    // Timestamp selection
    document.getElementById('loadTimestampBtn').addEventListener('click', () => {
        const dropdown = document.getElementById('historyTimestampDropdown');
        const selectedIndex = dropdown.value;
        if (selectedIndex !== '' && currentClassId && groupHistory[currentClassId]) {
            const entry = groupHistory[currentClassId][selectedIndex];
            if (entry) {
                console.log("Loading groups from timestamp..."); loadGroupsFromEntry(entry);
                console.log("Showing main screen after timestamp load..."); showMainScreen(); console.log("Main screen shown, back button should work now");
            }
        } else {
            alert('Please select a timestamp');
        }
    });

    // Main screen functionality
    document.getElementById('createGroupsBtn').addEventListener('click', () => {
        const groupSize = parseInt(document.getElementById('groupSizeInput').value);

        if (currentStudents.length === 0) {
            alert('Please load a class list first');
            return;
        }

        if (isNaN(groupSize) || groupSize < 1) {
            alert('Please enter a valid group size (1 or more)');
            return;
        }

        createGroups(currentStudents, groupSize);
    });

    document.getElementById('shuffleBtn').addEventListener('click', () => {
        const groupSize = parseInt(document.getElementById('groupSizeInput').value);
        if (isNaN(groupSize) || groupSize < 1) {
            alert('Please enter a valid group size (1 or more)');
            return;
        }
        
        if (!currentClassId) {
            alert('Please load a class first');
            return;
        }

        const unlockedStudents = [];
        const lockedStudentsByGroup = new Map();
        const groupElements = document.querySelectorAll('.group');

        groupElements.forEach(groupEl => {
            const lockedInGroup = [];
            groupEl.querySelectorAll('.student.locked span:first-child').forEach(studentEl => {
                lockedInGroup.push(studentEl.textContent);
            });
            lockedStudentsByGroup.set(groupEl.id, lockedInGroup);

            groupEl.querySelectorAll('.student:not(.locked)').forEach(studentEl => {
                unlockedStudents.push(studentEl.querySelector('span').textContent);
                studentEl.remove();
            });
        });

        const historicalPairs = getHistoricalPairs(groupHistory[currentClassId]);
        let bestGrouping = null;
        let bestScore = Infinity;

        for (let i = 0; i < 100; i++) {
            const shuffled = [...unlockedStudents].sort(() => 0.5 - Math.random());
            const currentArrangement = new Map();
            groupElements.forEach(groupEl => {
                currentArrangement.set(groupEl.id, [...lockedStudentsByGroup.get(groupEl.id)]);
            });

            let studentIdx = 0;
            for (const groupEl of groupElements) {
                const group = currentArrangement.get(groupEl.id);
                while (group.length < groupSize && studentIdx < shuffled.length) {
                    group.push(shuffled[studentIdx++]);
                }
            }
            
            for (const groupEl of groupElements) {
                if (studentIdx >= shuffled.length) break;
                const group = currentArrangement.get(groupEl.id);
                group.push(shuffled[studentIdx++]);
            }

            const score = calculateScore(Array.from(currentArrangement.values()), historicalPairs);
            if (score < bestScore) {
                bestScore = score;
                bestGrouping = currentArrangement;
            }
            if (bestScore === 0) break;
        }

        bestGrouping.forEach((students, groupId) => {
            const groupEl = document.getElementById(groupId);
            groupEl.querySelectorAll('.student:not(.locked)').forEach(el => el.remove());
            students.forEach(studentName => {
                if (!lockedStudentsByGroup.get(groupId).includes(studentName)) {
                    groupEl.appendChild(createStudentElement(studentName));
                }
            });
        });
    });

    document.getElementById('saveBtn').addEventListener('click', async () => {
        if (!currentClassId) {
            alert('Please load a class before saving.');
            return;
        }

        const groups = [];
        document.querySelectorAll('.group').forEach(groupEl => {
            const students = [];
            groupEl.querySelectorAll('.student span:first-child').forEach(studentEl => {
                students.push(studentEl.textContent);
            });
            groups.push(students);
        });

        const newHistoryEntry = {
            timestamp: new Date().toISOString(),
            groups: groups,
            incompatiblePairs: Array.from(incompatiblePairs)
        };

        if (!groupHistory[currentClassId]) {
            groupHistory[currentClassId] = [];
        }
        groupHistory[currentClassId].push(newHistoryEntry);

        try {
            const response = await fetch(`/history/${currentClassId}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(groupHistory[currentClassId], null, 2),
            });
            if (response.ok) {
                alert('History saved successfully!');
                populateTimestampDropdown(currentClassId);
            } else {
                throw new Error('Failed to save history');
            }
        } catch (error) {
            console.error('Error saving history:', error);
            alert('Error saving history.');
        }
    });

    document.getElementById('markIncompatibleBtn').addEventListener('click', () => {
        const input = document.getElementById('incompatibleInput').value;
        const names = input.split(',').map(n => n.trim()).filter(n => n);
        if (names.length === 2) {
            const pair = names.sort().join('|');
            incompatiblePairs.add(pair);
            document.getElementById('incompatibleInput').value = '';
            alert('Students marked as incompatible');
        } else {
            alert('Please enter exactly two names separated by comma');
        }
    });

    document.getElementById('addGroupBtn').addEventListener('click', () => {
        const groupsContainer = document.getElementById('groupsContainer');
        const existingGroups = document.querySelectorAll('.group');
        const numGroups = existingGroups.length + 1;
        const groupDiv = document.createElement('div');
        groupDiv.className = 'group';
        groupDiv.id = `group-${numGroups}`;
        groupDiv.innerHTML = `<h3>Group ${numGroups}</h3>`;
        addDropHandlers(groupDiv);
        groupsContainer.appendChild(groupDiv);
    });

    // Show start screen initially
    showStartScreen();
}

document.addEventListener('DOMContentLoaded', initializeApp);
